#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 13 11:08:06 2020

@author: kabram
"""
# begining information
__author__ = 'Kaleb Abram (abram.kaleb@gmail.com)'
__version__ = '0.9'
__date__ = 'December 19, 2022'


# libraries
import pandas as pd


class outputConverter(object):
    """
    This script is designed to assist and speed up the construction of 
    symetrical distance matrices from the output of Mash or FastANI.
    """

    def __init__(self, inFile):
        # set fp within the object and try to read it.
        # If wrong filepath, error will be raised
        self.inFile = inFile
        try:
            f = open(self.inFile)
            f.close()
        except FileNotFoundError as e:
            print("The name file or folder is incorrect.\
                  An error has occurred.")
            raise FileNotFoundError("The file name or filepath is incorrect. \
Please double check the filepath or file name.") from e
            
        # store empty versions of final data in object at object creation    
        self.delimiter = '\t'
        self.mode = 'mash'
        self.trimOpt = 'yes'
        self.convertANI = 'yes'
        self.invertANI = 'yes'
        self.distmat = ''
    
    # function to parse the input file from Mash into a dictionary and convert it to a dataframe
    def mashParser(self,):
        dicty = {}
        with open(self.inFile, 'r') as fp:
            for line in fp:
                split = line.split(self.delimiter)
                if self.trimOpt == 'yes':
                    g1 = split[1].rsplit('/')[-1]
                    g2 = split[0].rsplit('/')[-1]
                else:
                    g1 = split[1]
                    g2 = split[0]
                distance = split[2]
                if g1 not in dicty.keys():
                    dicty[g1] = [distance]
                else:
                    dicty[g1].append(distance)
        distmat = pd.DataFrame.from_dict(dicty, orient = 'index')
        distmat.columns = distmat.index
        return distmat

    # function to parse the input file from FastANI into a dictionary and convert it to a dataframe
    def aniParser(self,):
        g1List = []
        g2List = []
        distList = []
        with open(self.inFile, 'r') as fp:
            for line in fp:
                split = line.split(self.delimiter)
                if self.trimOpt == 'yes':
                    g1 = split[0].rsplit('/')[-1]
                    g2 = split[1].rsplit('/')[-1]
                else:
                    g1 = split[0]
                    g2 = split[1]
                distance = split[2]
                g1List.append(g1)
                g2List.append(g2)
                distList.append(distance)
        unpivDF = pd.DataFrame()
        unpivDF['g1'] = g1List
        unpivDF['g2'] = g2List   
        unpivDF['distance'] = distList
        if self.convertANI == 'yes':
            unpivDF['distance'] = round(1-(unpivDF['distance'].astype(float)/100),6)
        else:
            if self.invertANI == 'yes':
                unpivDF['distance'] = round(100-unpivDF['distance'].astype(float),6)
        distmat = unpivDF.pivot(index = 'g2', columns = 'g1', values = 'distance')
        distmat.rename_axis('', axis = 'index', inplace = True)
        return distmat                

##########


# Module test
if __name__ == "__main__":
    import argparse
    usage = """%(prog)s reads a regularly delimited file and returns a .csv \
               distance matrix result. If an ANI table is input please specify \
               with the '-m ani'. If using ANI values, please specify \
               how %(prog)s should handle the ANI values with the options '-c yes' or \
               '-i yes'. Note: '-c' or '-i' are conflicting options with \
               '-c' having a higher priority."""

    descript = """%(prog)s is a GRUMPS helper script intended to help researchers \
               quickly modify their data. See the white paper: https://doi.org/10.1101/2022.12.19.521123"""
               

    parser = argparse.ArgumentParser(description=usage, epilog = descript)
    parser.add_argument("filepath", metavar="filepath",
                        help="The filepath to a Mash or ANI tabular output \
                        with a genome ID for each pairwise comparision in two \
                        columns and the 'distance' in the thrid column\
                        ", type=str)
    parser.add_argument("-m", "--mode", dest="mode",
                        help="Specify if using 'mash' or 'ani' values. \
                        [default: 'mash']", 
                        type=str, default = 'mash', 
                        choices = ['mash', 'ani'])
    parser.add_argument("-d", "--delimiter", dest="delimiter",
                        help="If delimiter is not tab, specify. [default: '\t']\
                        ", type=str, default = '\t')
    parser.add_argument("-t", "--trimopt", dest = "trimOpt",
                        help="Trim the row and column IDs by removing \
                        anything before the last '/' character. \
                        [default: 'yes']\
                        ", type=str, default = 'yes', choices = ['yes', 'no'])
    parser.add_argument("-c", "--convertani", dest = "convertANI",
                        help="Specify if ANI values should be \
                        converted into Mash distances using \
                        1-(ANI/100). [default: 'yes']\
                        ", type=str, default = 'yes', choices = ['yes', 'no'])
    parser.add_argument("-i", "--invertani", dest = "invertANI",
                        help="Specify if ANI values should be inverted \
                        for using ANI values with GRUMPS. \
                        [default: 'no']\
                        ", type=str, default = 'no', choices = ['yes', 'no'])
    parser.add_argument("-v", "--version", action="version", version="%(prog)s \
                        v{} ({}) By: {}\
                        ".format(__version__, __date__, __author__))


    args = parser.parse_args()
    filepath = args.filepath
    mode = args.mode
    delimiter = args.delimiter
    trimOpt = args.trimOpt
    convertANI = args.convertANI
    invertANI = args.invertANI

    distmatConverter = outputConverter(filepath)

    if args.delimiter:
        distmatConverter.delimiter = delimiter
    if args.mode:
        distmatConverter.mode = mode
    if args.trimOpt:
        distmatConverter.trimOpt = trimOpt
    if args.convertANI:
        distmatConverter.convertANI = convertANI
    if args.invertANI:
        distmatConverter.invertANI = invertANI

    # run in Mash mode
    if args.mode == 'mash':
        distmatConverter.distmat = distmatConverter.mashParser()

    # run in ANI mode
    if args.mode == 'ani':
        distmatConverter.distmat = distmatConverter.aniParser()

    # create outfp
    try:
        outfp = distmatConverter.inFile.rsplit('.',1)[0] + '_distmat.csv'
    except:
        outfp = distmatConverter.inFile + '_distmat.csv'

    # write out the distmat
    distmatConverter.distmat.to_csv(outfp)

    
###########

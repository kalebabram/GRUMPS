#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thur June 7 11:08:06 2023

@author: kabram
"""
# begining information
__author__ = 'Kaleb Abram (abram.kaleb@gmail.com)'
__version__ = '1.0'
__date__ = 'June 7, 2023'


# libraries
import pandas as pd


class medoidFinder(object):
    """
    This script is designed to identify the medoids output by r_grumps 
    """

    def __init__(self, inFile):
        # set fp within the object and try to read it.
        # If wrong filepath, error will be raised
        self.inFile = inFile
        try:
            self.medoidMat = pd.read_csv(self.inFile, index_col = 0)
            self.medoidMat = self.medoidMat.T
        except FileNotFoundError as e:
            print("The name file or folder is incorrect.\
                  An error has occurred.")
            raise FileNotFoundError("The file name or filepath is incorrect. \
Please double check the filepath or file name.") from e
            
        # store empty versions of final data in object at object creation
        self.medoidList = []
        self.outFile = ''
        self.delimiter = ''
    
    # function to parse the input file from Mash into a dictionary and convert it to a dataframe
    def medoidParser(self,):
        self.outFile = self.inFile.split('_medoid_centers.csv')[0] + '_medoid_list'
        self.medoidList.append('medoid' + self.delimiter + 'cluster')
        for col in self.medoidMat.columns:
            self.medoidList.append(list(self.medoidMat[col].sort_values().index)[0] + self.delimiter + str(int(col)))
        with open(self.outFile, 'w') as outfile:
            outfile.writelines('\n'.join(self.medoidList))              

##########


# Module test
if __name__ == "__main__":
    import argparse
    usage = """%(prog)s processes the medoid output from r_grumps and returns a \
               text file containing the medoid of each cluster."""

    descript = """%(prog)s is a GRUMPS helper script intended to help researchers \
               quickly modify their data. See the white paper: doi: 10.--.--."""
               

    parser = argparse.ArgumentParser(description=usage, epilog = descript)
    parser.add_argument("filepath", metavar="filepath",
                        help="The filepath to a r_grumps medoid output \
                        file ", type=str)
    parser.add_argument("-d", "--delimiter", dest="delimiter",
                        help="If delimiter is not tab, specify. [default: ',']\
                        ", type=str, default = ',')
    parser.add_argument("-v", "--version", action="version", version="%(prog)s \
                        v{} ({}) By: {}\
                        ".format(__version__, __date__, __author__))


    args = parser.parse_args()
    filepath = args.filepath
    delimiter = args.delimiter

    medoidObj = medoidFinder(filepath)

    if args.delimiter:
        medoidObj.delimiter = delimiter

    # execute the script
    medoidObj.medoidParser()

###########